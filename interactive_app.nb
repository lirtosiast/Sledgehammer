(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     21837,        496]
NotebookOptionsPosition[     21380,        479]
NotebookOutlinePosition[     21723,        494]
CellTagsIndexPosition[     21680,        491]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[", " ", 
   RowBox[{"DirectoryName", "@", 
    RowBox[{"NotebookFileName", "[", "]"}]}], "]"}], ";", " ", 
  RowBox[{"Get", "[", "\"\<SHInterpreter`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"expr", "[", "c_", "]"}], ":=", 
    RowBox[{"preprocess", "[", 
     RowBox[{"ToExpression", "[", 
      RowBox[{"c", ",", "StandardForm", ",", "HoldComplete"}], "]"}], "]"}]}],
    ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pfCode", " ", ":=", " ", 
   RowBox[{"wToPostfix", "@", 
    RowBox[{"expr", "@", "code"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cmpCode", " ", ":=", " ", 
   RowBox[{"compress", "@", 
    RowBox[{"wToPostfix", "@", 
     RowBox[{"expr", "@", "code"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"brCode", " ", ":=", " ", 
   RowBox[{"bitsToBraille", "@", "cmpCode"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lenBits", " ", ":=", " ", 
   RowBox[{"Length", "@", "cmpCode"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lenBytes", " ", ":=", " ", 
   RowBox[{".125", " ", "*", " ", "lenBits"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"decompCode", " ", ":=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"brCode", " ", "//", " ", "brailleToBits"}], " ", "//", " ", 
      "decompress"}], " ", "//", " ", "postfixToW"}], " ", "//", " ", 
    "postprocess"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"result", " ", ":=", " ", 
    RowBox[{"eval", "[", 
     RowBox[{"decompCode", ",", " ", "input"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"ExpressionCell", "@", 
  RowBox[{"Panel", "@", 
   RowBox[{"Column", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Put code below:\>\"", ",", "\[IndentingNewLine]", 
      RowBox[{"InputField", "[", 
       RowBox[{
        RowBox[{"Dynamic", "@", "code"}], ",", "String", ",", " ", 
        RowBox[{"FieldSize", " ", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"40", ",", "80"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"5", ",", "Infinity"}], "}"}]}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Row", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Input (as a list): \>\"", ",", 
         RowBox[{"InputField", "[", 
          RowBox[{"Dynamic", "@", "input"}], "]"}]}], "}"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Button", "[", "\"\<Update\>\"", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"CheckboxBar", "[", 
       RowBox[{
        RowBox[{"Dynamic", "@", "cbs"}], ",", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Show postfix\>\"", ",", "\"\<Show bits\>\"", ",", 
          "\"\<Show Braille\>\"", ",", "\"\<Show decompressed\>\"", ",", " ", 
          "\"\<Eval\>\""}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Dynamic", "@", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"cbs", ",", "\"\<Show postfix\>\""}], "]"}], ",", "pfCode", 
         ",", "\"\<\>\""}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"Dynamic", "@", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"cbs", ",", "\"\<Show bits\>\""}], "]"}], ",", "cmpCode", 
         ",", "\"\<\>\""}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"Dynamic", "@", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"cbs", ",", "\"\<Show Braille\>\""}], "]"}], ",", "brCode", 
         ",", "\"\<\>\""}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"Dynamic", "@", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"cbs", ",", "\"\<Show decompressed\>\""}], "]"}], ",", 
         RowBox[{"decompCode", " ", "//", " ", "InputForm"}], ",", 
         "\"\<\>\""}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"Dynamic", "@", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"cbs", ",", "\"\<Eval\>\""}], "]"}], ",", "result", ",", 
         "\"\<\>\""}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"Style", "[", 
       RowBox[{
        RowBox[{"Row", "@", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Dynamic", "@", 
            RowBox[{"Length", "@", "pfCode"}]}], ",", "\"\< tokens\>\""}], 
          "}"}]}], ",", 
        RowBox[{"FontSize", "\[Rule]", "Larger"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Style", "[", 
       RowBox[{
        RowBox[{"Row", "@", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Dynamic", "@", "lenBits"}], ",", "\"\< bits = \>\"", ",", 
           RowBox[{"Dynamic", "@", "lenBytes"}], " ", ",", " ", 
           "\"\< bytes\>\""}], "}"}]}], ",", 
        RowBox[{"FontSize", "\[Rule]", "Larger"}]}], "]"}]}], 
     "\[IndentingNewLine]", "}"}], "]"}]}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7674613148730574`*^9, 3.767461317557584*^9}, {
   3.767461364008748*^9, 3.7674613865786743`*^9}, {3.767461431823718*^9, 
   3.767461464194298*^9}, {3.7674617646912537`*^9, 3.7674618275048046`*^9}, {
   3.7674618610857086`*^9, 3.7674619675655727`*^9}, {3.7674620047422733`*^9, 
   3.767462045731682*^9}, {3.767462194976065*^9, 3.767462213418771*^9}, {
   3.767463578975291*^9, 3.767463649494282*^9}, 3.767463691401148*^9, {
   3.767463722016713*^9, 3.7674637240182505`*^9}, {3.7674639922275553`*^9, 
   3.7674640030918894`*^9}, {3.7674641293680687`*^9, 3.767464135973136*^9}, {
   3.7674641659742904`*^9, 3.7674642114642315`*^9}, {3.767464252486929*^9, 
   3.7674642721775813`*^9}, {3.7674643116510334`*^9, 
   3.7674643221019216`*^9}, {3.767464902874652*^9, 3.767464949993264*^9}, {
   3.767464996295643*^9, 3.7674650560815697`*^9}, {3.767465087734498*^9, 
   3.767465312411725*^9}, {3.767465396905928*^9, 3.767465419819413*^9}, {
   3.76746551951373*^9, 3.7674655950512347`*^9}, {3.767465695486286*^9, 
   3.7674658296513066`*^9}, {3.7674658601985617`*^9, 3.767466059744135*^9}, {
   3.7674661091934223`*^9, 3.767466263717037*^9}, {3.767466297229704*^9, 
   3.7674665575736275`*^9}, {3.767466594478712*^9, 3.7674666006189756`*^9}, {
   3.7674667152675047`*^9, 3.767466788528231*^9}, {3.76746685686872*^9, 
   3.767466901190629*^9}, {3.767467013726942*^9, 3.7674670255639734`*^9}, {
   3.767467181484248*^9, 3.767467192045411*^9}, {3.7674672524645452`*^9, 
   3.767467295665216*^9}, {3.7674673574685764`*^9, 3.7674674963081846`*^9}, {
   3.7674675289403095`*^9, 3.7674675340541325`*^9}, {3.76746757298781*^9, 
   3.7674675874164677`*^9}, {3.76746763087671*^9, 3.767467642692244*^9}, {
   3.7674676824478345`*^9, 3.76746770586156*^9}, {3.767467740776146*^9, 
   3.767467741777401*^9}, {3.7674908350984564`*^9, 3.7674908982434993`*^9}, {
   3.767490956249745*^9, 3.767490960718503*^9}, {3.7674911819334745`*^9, 
   3.76749120742262*^9}, {3.767491239062975*^9, 3.767491271935687*^9}, {
   3.767491311969945*^9, 3.7674913124525614`*^9}, {3.767491457025051*^9, 
   3.767491465833515*^9}, {3.767491511152277*^9, 3.767491610387621*^9}, {
   3.7674916786753674`*^9, 3.767491695710125*^9}, {3.7674917389783974`*^9, 
   3.767491773622029*^9}, {3.7674918896280003`*^9, 3.767491976751356*^9}, {
   3.7674920148435717`*^9, 3.7674920484324055`*^9}, {3.7674921611644077`*^9, 
   3.767492176593827*^9}, {3.7674922344383235`*^9, 3.767492279946725*^9}, {
   3.7674923480302687`*^9, 3.76749242773275*^9}, {3.767492468162644*^9, 
   3.7674925125218925`*^9}, {3.7674925870578175`*^9, 3.767492629731082*^9}, {
   3.767492669719041*^9, 3.767492678647958*^9}, {3.76749271652026*^9, 
   3.7674927601610703`*^9}, {3.767492792380678*^9, 3.76749289128728*^9}, {
   3.7674929831545315`*^9, 3.767493106105425*^9}, {3.7674931535355244`*^9, 
   3.7674935154494314`*^9}, {3.7674935548042355`*^9, 3.767493568009781*^9}, {
   3.7675502021197753`*^9, 3.767550223331442*^9}, {3.76755025428952*^9, 
   3.7675502959652057`*^9}, {3.7675503619967723`*^9, 
   3.7675505282367163`*^9}, {3.7675505993953695`*^9, 3.7675506262538643`*^9}, 
   3.7675506781674623`*^9, {3.7675507360988398`*^9, 3.7675507391395445`*^9}, {
   3.7675507883085337`*^9, 3.7675508060966406`*^9}, {3.767550919705526*^9, 
   3.7675509946999006`*^9}, {3.76755129589685*^9, 3.767551298257598*^9}, {
   3.767568823156766*^9, 3.767568852921087*^9}, {3.7675689088055058`*^9, 
   3.767568909460805*^9}, 3.7675731142112813`*^9, {3.767573884481518*^9, 
   3.767573896916336*^9}, {3.767574011230595*^9, 3.7675740392799945`*^9}, {
   3.767811274982366*^9, 3.7678113002617297`*^9}, {3.7678327984615593`*^9, 
   3.767832849288883*^9}, {3.767832904004052*^9, 3.7678329169700994`*^9}, {
   3.7678329498748903`*^9, 3.767832964460842*^9}, {3.7678330484555025`*^9, 
   3.7678332605956554`*^9}, {3.767919464781975*^9, 3.767919529082487*^9}, 
   3.767988183495757*^9, {3.767988381621436*^9, 3.767988393738879*^9}, {
   3.767988431074938*^9, 3.7679884706017113`*^9}, {3.76798853116011*^9, 
   3.76798855464403*^9}, {3.767988614070641*^9, 3.7679886471721025`*^9}, {
   3.7679887414141474`*^9, 3.767988965049281*^9}, {3.7679893147393045`*^9, 
   3.767989435566346*^9}, {3.7679894912123876`*^9, 3.7679895188993235`*^9}, {
   3.767989572012633*^9, 3.7679895970567913`*^9}, {3.7679899105291014`*^9, 
   3.767989912234855*^9}, {3.7679909536356936`*^9, 3.7679910432172136`*^9}, {
   3.7679911496559176`*^9, 3.7679911688188925`*^9}, {3.7679915495476694`*^9, 
   3.767991552076136*^9}, {3.76799171895324*^9, 3.767991733777089*^9}, 
   3.767993554113516*^9, {3.7679940002991095`*^9, 3.767994003280307*^9}, {
   3.767994083174265*^9, 3.767994091009771*^9}, {3.768243402035859*^9, 
   3.768243459112623*^9}, 3.7682434959060855`*^9, {3.7682435260414047`*^9, 
   3.768243552571559*^9}, {3.768252380106434*^9, 3.768252380842497*^9}, {
   3.768262403152917*^9, 3.7682624107356186`*^9}, {3.768262441107768*^9, 
   3.7682624546876373`*^9}, {3.76867429334336*^9, 3.7686743277829323`*^9}, 
   3.7686743595257635`*^9, {3.7686744024018035`*^9, 3.768674407009635*^9}, {
   3.768740829548462*^9, 3.768740848903527*^9}, {3.7687410332716846`*^9, 
   3.76874103356091*^9}, {3.7687413176530704`*^9, 3.768741319906605*^9}, {
   3.7687414211254587`*^9, 3.7687414274108896`*^9}, {3.7687416386691666`*^9, 
   3.7687416821209893`*^9}, {3.76874180514711*^9, 3.768741849305575*^9}, {
   3.7687420371478033`*^9, 3.7687420391420703`*^9}, {3.7687468964872284`*^9, 
   3.768746901182759*^9}, {3.7687470123979597`*^9, 3.76874702984507*^9}, {
   3.7687475832495937`*^9, 3.7687475869618254`*^9}, {3.768747627264134*^9, 
   3.768747645619771*^9}, {3.7687477382604947`*^9, 3.768747775918425*^9}, {
   3.7687479942173023`*^9, 3.7687479968066654`*^9}, {3.7687480364128857`*^9, 
   3.768748080020774*^9}, {3.7687482002384453`*^9, 3.768748240066416*^9}, {
   3.7687491196513815`*^9, 3.7687491693043485`*^9}, {3.768749470851033*^9, 
   3.7687494897294583`*^9}, {3.768750665344716*^9, 3.768750711118772*^9}, {
   3.7687508786446505`*^9, 3.7687508823471107`*^9}, {3.768750919890552*^9, 
   3.7687509655726304`*^9}, {3.768751241182712*^9, 3.768751303631513*^9}, {
   3.7687515846927633`*^9, 3.768751586292739*^9}, {3.768751638764007*^9, 
   3.768751667108102*^9}, 3.7687517111086025`*^9, {3.768752255923524*^9, 
   3.7687522729509926`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"e6f65d0c-15d1-459a-85d8-afacb43b0641"],

Cell[BoxData[
 InterpretationBox[Cell[BoxData[
   PanelBox[
    TagBox[GridBox[{
       {"\<\"Put code below:\"\>"},
       {
        InputFieldBox[Dynamic[$CellContext`code], String,
         FieldSize->{{40, 80}, {5, 
            DirectedInfinity[1]}}]},
       {
        TemplateBox[{"\"Input (as a list): \"",InputFieldBox[
           Dynamic[$CellContext`input]]},
         "RowDefault"]},
       {
        ButtonBox["\<\"Update\"\>",
         Appearance->Automatic,
         ButtonFunction:>{},
         Evaluator->None,
         Method->"Preemptive"]},
       {
        InterpretationBox[
         StyleBox[
          RowBox[{GridBox[{
             {
              CheckboxBox[Dynamic[
                MemberQ[$CellContext`cbs, "Show postfix"], 
                BoxForm`TogglerBarFunction[$CellContext`cbs, 
                 "Show postfix"]& ],
               DefaultBaseStyle->"CheckboxBar"], 
              StyleBox["\<\"Show postfix\"\>", "CheckboxBarLabel",
               StripOnInput->False]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 2},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.21]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "  ", GridBox[{
             {
              CheckboxBox[Dynamic[
                MemberQ[$CellContext`cbs, "Show bits"], 
                BoxForm`TogglerBarFunction[$CellContext`cbs, "Show bits"]& ],
               DefaultBaseStyle->"CheckboxBar"], 
              StyleBox["\<\"Show bits\"\>", "CheckboxBarLabel",
               StripOnInput->False]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 2},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.21]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "  ", GridBox[{
             {
              CheckboxBox[Dynamic[
                MemberQ[$CellContext`cbs, "Show Braille"], 
                BoxForm`TogglerBarFunction[$CellContext`cbs, 
                 "Show Braille"]& ],
               DefaultBaseStyle->"CheckboxBar"], 
              StyleBox["\<\"Show Braille\"\>", "CheckboxBarLabel",
               StripOnInput->False]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 2},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.21]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "  ", GridBox[{
             {
              CheckboxBox[Dynamic[
                MemberQ[$CellContext`cbs, "Show decompressed"], 
                BoxForm`TogglerBarFunction[$CellContext`cbs, 
                 "Show decompressed"]& ],
               DefaultBaseStyle->"CheckboxBar"], 
              StyleBox["\<\"Show decompressed\"\>", "CheckboxBarLabel",
               StripOnInput->False]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 2},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.21]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "  ", GridBox[{
             {
              CheckboxBox[Dynamic[
                MemberQ[$CellContext`cbs, "Eval"], 
                BoxForm`TogglerBarFunction[$CellContext`cbs, "Eval"]& ],
               DefaultBaseStyle->"CheckboxBar"], 
              StyleBox["\<\"Eval\"\>", "CheckboxBarLabel",
               StripOnInput->False]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 2},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.21]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}]}], "Deploy"],
         CheckboxBar[
          Dynamic[$CellContext`cbs], {
          "Show postfix", "Show bits", "Show Braille", "Show decompressed", 
           "Eval"}]]},
       {
        DynamicBox[ToBoxes[
          If[
           MemberQ[$CellContext`cbs, "Show postfix"], $CellContext`pfCode, 
           ""], StandardForm],
         ImageSizeCache->{0., {0., 6.}}]},
       {
        DynamicBox[ToBoxes[
          If[
           MemberQ[$CellContext`cbs, "Show bits"], $CellContext`cmpCode, ""], 
          StandardForm],
         ImageSizeCache->{0., {0., 6.}}]},
       {
        DynamicBox[ToBoxes[
          If[
           MemberQ[$CellContext`cbs, "Show Braille"], $CellContext`brCode, 
           ""], StandardForm],
         ImageSizeCache->{0., {0., 6.}}]},
       {
        DynamicBox[ToBoxes[
          If[
           MemberQ[$CellContext`cbs, "Show decompressed"], 
           InputForm[$CellContext`decompCode], ""], StandardForm],
         ImageSizeCache->{0., {0., 6.}}]},
       {
        DynamicBox[ToBoxes[
          If[
           MemberQ[$CellContext`cbs, "Eval"], SHInterpreter`result, ""], 
          StandardForm],
         ImageSizeCache->{0., {0., 6.}}]},
       {
        StyleBox[
         TemplateBox[{DynamicBox[
            ToBoxes[
             Length[$CellContext`pfCode], StandardForm]],"\" tokens\""},
          "RowDefault"],
         StripOnInput->False,
         FontSize->Larger]},
       {
        StyleBox[
         TemplateBox[{DynamicBox[
            ToBoxes[$CellContext`lenBits, StandardForm]],"\" bits = \"",
           DynamicBox[
            ToBoxes[$CellContext`lenBytes, StandardForm]],"\" bytes\""},
          "RowDefault"],
         StripOnInput->False,
         FontSize->Larger]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]]],ExpressionUUID->"bf4c49db-f665-43e3-b731-e60bde37ca58"],
  ExpressionCell[
   Panel[
    Column[{"Put code below:", 
      InputField[
       Dynamic[$CellContext`code], String, FieldSize -> {{40, 80}, {5, 
          DirectedInfinity[1]}}], 
      Row[{"Input (as a list): ", 
        InputField[
         Dynamic[$CellContext`input]]}], 
      Button["Update"], 
      CheckboxBar[
       Dynamic[$CellContext`cbs], {
       "Show postfix", "Show bits", "Show Braille", "Show decompressed", 
        "Eval"}], 
      Dynamic[
       If[
        MemberQ[$CellContext`cbs, "Show postfix"], $CellContext`pfCode, ""]], 
      Dynamic[
       If[
        MemberQ[$CellContext`cbs, "Show bits"], $CellContext`cmpCode, ""]], 
      Dynamic[
       If[
        MemberQ[$CellContext`cbs, "Show Braille"], $CellContext`brCode, ""]], 
      Dynamic[
       If[
        MemberQ[$CellContext`cbs, "Show decompressed"], 
        InputForm[$CellContext`decompCode], ""]], 
      Dynamic[
       If[
        MemberQ[$CellContext`cbs, "Eval"], SHInterpreter`result, ""]], 
      Style[
       Row[{
         Dynamic[
          Length[$CellContext`pfCode]], " tokens"}], FontSize -> Larger], 
      Style[
       Row[{
         Dynamic[$CellContext`lenBits], " bits = ", 
         Dynamic[$CellContext`lenBytes], " bytes"}], FontSize -> 
       Larger]}]]]]], "Output",
 CellChangeTimes->{
  3.7687507117042365`*^9, 3.76875088728627*^9, {3.7687509487983284`*^9, 
   3.7687509662707853`*^9}, 3.7687513053519125`*^9, 3.7687513988979297`*^9, 
   3.768751589419982*^9, {3.7687516439768295`*^9, 3.7687516679063845`*^9}, {
   3.7687524915266857`*^9, 3.7687524923392286`*^9}, {3.768752573347779*^9, 
   3.7687525946386642`*^9}, {3.7687531887296066`*^9, 3.76875319250032*^9}, {
   3.7687533305684505`*^9, 3.7687533319590616`*^9}, {3.7687534028817225`*^9, 
   3.768753404657937*^9}, {3.7687543893326683`*^9, 3.768754391218648*^9}, {
   3.7687839135776377`*^9, 3.7687839142952337`*^9}, {3.7687864201673665`*^9, 
   3.768786422069307*^9}},
 CellLabel->"Out[20]=",ExpressionUUID->"1e96f419-76e3-4212-b121-699d2937f9ec"]
}, Open  ]]
},
WindowSize->{958, 988},
WindowMargins->{{342, Automatic}, {Automatic, 34}},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 11525, 216, 482, "Input",ExpressionUUID->"e6f65d0c-15d1-459a-85d8-afacb43b0641",
 InitializationCell->True],
Cell[12108, 240, 9256, 236, 350, "Output",ExpressionUUID->"1e96f419-76e3-4212-b121-699d2937f9ec"]
}, Open  ]]
}
]
*)

